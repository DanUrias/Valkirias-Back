(()=>{"use strict";var e={63:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0}),t.ScoreProvider=void 0;const s=i(496);class o extends s.TreeItem{constructor(e,t){super(e.title,t),this.data=e,this.collapsibleState=t,this.contextValue="score-item-"+this.data.title,this.data=e,this.label=e.title,e.description?(this.description=e.description,this.iconPath=new s.ThemeIcon("arrow-small-right")):this.iconPath=new s.ThemeIcon("gift"),e.tooltip&&(this.tooltip=e.tooltip),this.scores=e.scores}}class a{constructor(e){this._items=[],this._onDidChangeTreeData=new s.EventEmitter,this.onDidChangeTreeData=this._onDidChangeTreeData.event}parseTreeData(e){const t={};for(var i in e){const s=e[i],o=new Date(s.winningDate).toDateString();t[o]=t[o]??[],t[o].push(s)}const a=[];for(var i in t)a.push(new o({title:i,scores:t[i]},s.TreeItemCollapsibleState.Collapsed));return a}getTreeItem(e){return e}getChildren(e){return void 0===e?Promise.resolve(this._items):void 0!==e.scores?Promise.resolve(e.scores.map((e=>{const t=new Date(e.winningDate);return new o({title:t.getHours().toString().padStart(2,"0")+":"+t.getMinutes().toString().padStart(2,"0"),description:`\tLevel: ${e.gameLevel} x ${e.gameLevel}\t Moves: ${e.moves}`,tooltip:`Date: ${t.toLocaleString()}\nLevel: ${e.gameLevel} x ${e.gameLevel}\nMoves: ${e.moves}`},s.TreeItemCollapsibleState.None)}))):Promise.resolve([])}refresh(e){this._items=this.parseTreeData(e),this._onDidChangeTreeData.fire()}}t.ScoreProvider=a,a.viewType="slide.scoreboard"},20:(e,t,i)=>{Object.defineProperty(t,"__esModule",{value:!0});const s=i(496);class o{constructor(e){this._extensionUri=e}resolveWebviewView(e,t,i){this._view=e,e.webview.options={enableScripts:!0,localResourceRoots:[s.Uri.joinPath(this._extensionUri,"media")]},e.webview.html=this.getWebviewContent(e.webview),e.webview.onDidReceiveMessage((t=>{switch(t.command){case"moves":e.badge={tooltip:"Moves",value:t.data.moves};break;case"scores":this._callback&&this._callback(t.data.scores)}})),s.workspace.getConfiguration().has("slide.gameLevel")||s.workspace.getConfiguration().update("slide.gameLevel",o.MODE.NORMAL,s.ConfigurationTarget.Global)}getWebviewContent(e){const t=this.getNonce(),i=e.asWebviewUri(s.Uri.joinPath(this._extensionUri,"media","main.js")),o=s.Uri.joinPath(this._extensionUri,"media","styles.css"),a=e.asWebviewUri(o);return`<!DOCTYPE html>\n      <html lang="en">\n        <head>\n          <meta charset="UTF-8">\n          <meta name="viewport" content="width=device-width, initial-scale=1.0">\n          <meta http-equiv="Content-Security-Policy" content="default-src 'none'; style-src ${e.cspSource}; script-src 'nonce-${t}' 'unsafe-eval';">\n          <title>Slide Game</title>\n          <link href="${a.toString()}" rel="stylesheet">\n        </head>\n        <body data-vscode-context='{"preventDefaultContextMenuItems":true,"webviewSection":"game"}'>\n          <div id="slide-game" class="slider-game"></div>\n          <script nonce="${t}" src="${i}"><\/script>\n        </body>\n      </html>`}async newGame(){const e=this._view,t=s.workspace.getConfiguration().get("slide.gameLevel");await(e?.webview.postMessage({command:"new",level:t}))}async fetchScores(e){this._callback=e;const t=this._view;await(t?.webview.postMessage({command:"scores"}))}getNonce(){let e="";for(let t=0;t<32;t++)e+="ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789".charAt(Math.floor(62*Math.random()));return e}}o.viewType="slide.game",o.MODE={EASY:"3 x 3",NORMAL:"4 x 4",HARD:"5 x 5"},t.default=o},496:e=>{e.exports=require("vscode")}},t={};function i(s){var o=t[s];if(void 0!==o)return o.exports;var a=t[s]={exports:{}};return e[s](a,a.exports,i),a.exports}var s={};(()=>{var e=s;Object.defineProperty(e,"__esModule",{value:!0}),e.deactivate=e.activate=void 0;const t=i(496),o=i(20),a=i(63);e.activate=function(e){const i=new o.default(e.extensionUri);e.subscriptions.push(t.window.registerWebviewViewProvider(o.default.viewType,i));const s=new a.ScoreProvider(e);e.subscriptions.push(t.window.registerTreeDataProvider(a.ScoreProvider.viewType,s)),e.subscriptions.push(t.commands.registerCommand("slide.game.new",(async()=>{"Yes"===await t.window.showInformationMessage("Do you want to start a new game?","Yes","No")&&await i.newGame()})),t.commands.registerCommand("slide.game.settings",(async()=>{const e=t.workspace.getConfiguration().get("slide.gameLevel"),s=t.window.createQuickPick();s.title="Slide game level",s.items=[{label:o.default.MODE.EASY,picked:e===o.default.MODE.EASY},{label:o.default.MODE.NORMAL,picked:e===o.default.MODE.NORMAL},{label:o.default.MODE.HARD,picked:e===o.default.MODE.HARD}],s.onDidChangeSelection((async o=>(o.length>0&&e!==o[0].label&&t.workspace.getConfiguration().update("slide.gameLevel",o[0].label,t.ConfigurationTarget.Global).then((async()=>{"Yes"===await t.window.showInformationMessage("Do you want to start a new game in "+o[0].label+" mode?","Yes","No")?await i.newGame():await t.window.showInformationMessage("Your next game will be in "+o[0].label+" mode.")})),s.hide(),!0))),s.onDidHide((()=>s.dispose)),s.show()})),t.commands.registerCommand("slide.scoreboard.refresh",(()=>{i.fetchScores((e=>{s.refresh(e)}))}))),t.window.createTreeView(a.ScoreProvider.viewType,{treeDataProvider:s,showCollapseAll:!0}),setTimeout((()=>{t.commands.executeCommand("slide.scoreboard.refresh")}),1e3)},e.deactivate=function(){}})(),module.exports=s})();